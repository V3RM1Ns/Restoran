<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/RestaurantApp.BL/Dtos/MenuItem/MenuItemCreateDto.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/RestaurantApp.BL/Dtos/MenuItem/MenuItemCreateDto.cs" />
              <option name="originalContent" value="using RestaurantApp.Core.Enums;&#10;&#10;namespace RestaurantApp.BL.Dtos.MenuItem&#10;{&#10;    public class MenuItemCreateDto&#10;    {&#10;        public string Name { get; set; }&#10;        public decimal Price { get; set; }&#10;        public CategoryEnum Category { get; set; }&#10;        public int Quantity { get; set; }&#10;        public decimal CostValue { get; set; }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using RestaurantApp.Core.Enums;&#13;&#10;&#13;&#10;namespace RestaurantApp.BL.Dtos.MenuItem&#13;&#10;{&#13;&#10;    public class MenuItemCreateDto&#13;&#10;    {&#13;&#10;        public string Name { get; set; }&#13;&#10;        public decimal Price { get; set; }&#13;&#10;        public CategoryEnum Category { get; set; }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/RestaurantApp.BL/Dtos/MenuItem/MenuItemListDto.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/RestaurantApp.BL/Dtos/MenuItem/MenuItemListDto.cs" />
              <option name="originalContent" value="using RestaurantApp.Core.Enums;&#10;&#10;namespace RestaurantApp.BL.Dtos.MenuItem&#10;{&#10;    public class MenuItemListDto&#10;    {&#10;        public int Id { get; set; }&#10;        public string Name { get; set; }&#10;        public decimal Price { get; set; }&#10;        public CategoryEnum Category { get; set; }&#10;        public int Quantity { get; set; }&#10;        public decimal CostValue { get; set; }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using RestaurantApp.Core.Enums;&#13;&#10;&#13;&#10;namespace RestaurantApp.BL.Dtos.MenuItem&#13;&#10;{&#13;&#10;    public class MenuItemListDto&#13;&#10;    {&#13;&#10;        public int Id { get; set; }&#13;&#10;        public string Name { get; set; }&#13;&#10;        public decimal Price { get; set; }&#13;&#10;        public CategoryEnum Category { get; set; }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/RestaurantApp.BL/Dtos/MenuItem/MenuItemUpdateDto.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/RestaurantApp.BL/Dtos/MenuItem/MenuItemUpdateDto.cs" />
              <option name="originalContent" value="using RestaurantApp.Core.Enums;&#10;&#10;namespace RestaurantApp.BL.Dtos.MenuItem&#10;{&#10;    public class MenuItemUpdateDto&#10;    {&#10;        public int Id { get; set; }&#10;        public string Name { get; set; }&#10;        public CategoryEnum Category { get; set; }&#10;        public int Quantity { get; set; }&#10;        public decimal CostValue { get; set; }&#10;        public decimal Price { get; set; }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using RestaurantApp.Core.Enums;&#13;&#10;&#13;&#10;namespace RestaurantApp.BL.Dtos.MenuItem&#13;&#10;{&#13;&#10;    public class MenuItemUpdateDto&#13;&#10;    {&#13;&#10;        public int Id { get; set; }&#13;&#10;        public string Name { get; set; }&#13;&#10;        public decimal Price { get; set; }&#13;&#10;        public CategoryEnum Category { get; set; }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/RestaurantApp.BL/Dtos/Order/OrderCreateDto.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/RestaurantApp.BL/Dtos/Order/OrderCreateDto.cs" />
              <option name="originalContent" value="using RestaurantApp.BL.Dtos.OrderItem;&#10;&#10;namespace RestaurantApp.BL.Dtos.Order&#10;{&#10;    public class OrderCreateDto&#10;    {&#10;        public int TableId { get; set; }&#10;        public List&lt;OrderItemCreateDto&gt; OrderItems { get; set; }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using RestaurantApp.BL.Dtos.OrderItem;&#13;&#10;&#13;&#10;namespace RestaurantApp.BL.Dtos.Order&#13;&#10;{&#13;&#10;    public class OrderCreateDto&#13;&#10;    {&#13;&#10;        public List&lt;OrderItemCreateDto&gt; OrderItems { get; set; }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/RestaurantApp.BL/Dtos/Order/OrderListDto.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/RestaurantApp.BL/Dtos/Order/OrderListDto.cs" />
              <option name="originalContent" value="using RestaurantApp.BL.Dtos.OrderItem;&#10;&#10;namespace RestaurantApp.BL.Dtos.Order&#10;{&#10;    public class OrderListDto&#10;    {&#10;        public int Id { get; set; }&#10;        public decimal TotalAmount { get; set; }&#10;        public DateTime Date { get; set; }&#10;        public int? TableId { get; set; }&#10;        public string TableNo { get; set; }&#10;        public bool TableIsOccupied { get; set; }&#10;        public DateTime? TableOccupiedAt { get; set; }&#10;        public DateTime? TableReleasedAt { get; set; }&#10;        public List&lt;OrderItemListDto&gt;? OrderItems { get; set; }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using RestaurantApp.BL.Dtos.OrderItem;&#13;&#10;&#13;&#10;namespace RestaurantApp.BL.Dtos.Order&#13;&#10;{&#13;&#10;    public class OrderListDto&#13;&#10;    {&#13;&#10;        public int Id { get; set; }&#13;&#10;        public decimal TotalAmount { get; set; }&#13;&#10;        public DateTime Date { get; set; }&#13;&#10;        public int MenuItemCount { get; set; }&#13;&#10;        public List&lt;OrderItemListDto&gt;? OrderItems { get; set; }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/RestaurantApp.BL/Profiles/MenuItemProfile.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/RestaurantApp.BL/Profiles/MenuItemProfile.cs" />
              <option name="originalContent" value="using RestaurantApp.BL.Dtos.MenuItem;&#10;using RestaurantApp.BL.Dtos.Table;&#10;using RestaurantApp.Core.Models;&#10;&#10;namespace RestaurantApp.BL.Profiles&#10;{&#10;    public class MenuItemProfile&#10;    {&#10;        public static MenuItem MenuItemCreateDtoToMenuItem(MenuItemCreateDto menuItemCreateDto)&#10;        {&#10;            return new MenuItem&#10;            {&#10;                Name = menuItemCreateDto.Name,&#10;                Price = menuItemCreateDto.Price,&#10;                Category = menuItemCreateDto.Category,&#10;                Quantity = menuItemCreateDto.Quantity,&#10;                CostValue = menuItemCreateDto.CostValue&#10;            };&#10;        }&#10;        public static void UpdateMenuItemFromDto(MenuItem menuItem, MenuItemUpdateDto dto)&#10;        {&#10;            if (menuItem == null || dto == null) return;&#10;&#10;            menuItem.Name = dto.Name;&#10;            menuItem.Price = dto.Price;&#10;            menuItem.Category = dto.Category;&#10;            menuItem.Quantity = dto.Quantity;&#10;            menuItem.CostValue = dto.CostValue;&#10;        }&#10;&#10;        public static MenuItemListDto MenuItemToMenuItemListDto(MenuItem menuItem)&#10;        {&#10;            return new MenuItemListDto&#10;            {&#10;                Id = menuItem.Id,&#10;                Name = menuItem.Name,&#10;                Price = menuItem.Price,&#10;                Category = menuItem.Category,&#10;                Quantity = menuItem.Quantity,&#10;                CostValue = menuItem.CostValue&#10;            };&#10;        }&#10;&#10;        public static List&lt;MenuItemListDto&gt; MenuItemsToMenuItemListDtos(List&lt;MenuItem&gt; menuItems) =&gt; menuItems.Select(MenuItemToMenuItemListDto).ToList();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using RestaurantApp.BL.Dtos.MenuItem;&#13;&#10;using RestaurantApp.Core.Models;&#13;&#10;&#13;&#10;namespace RestaurantApp.BL.Profiles&#13;&#10;{&#13;&#10;    public class MenuItemProfile&#13;&#10;    {&#13;&#10;        public static MenuItem MenuItemCreateDtoToMenuItem(MenuItemCreateDto menuItemCreateDto)&#13;&#10;        {&#13;&#10;            return new MenuItem&#13;&#10;            {&#13;&#10;                Name = menuItemCreateDto.Name,&#13;&#10;                Price = menuItemCreateDto.Price,&#13;&#10;                Category = menuItemCreateDto.Category&#13;&#10;            };&#13;&#10;        }&#13;&#10;        &#13;&#10;        public static void UpdateMenuItemFromDto(MenuItem menuItem, MenuItemUpdateDto dto)&#13;&#10;        {&#13;&#10;            if (menuItem == null || dto == null) return;&#13;&#10;&#13;&#10;            menuItem.Name = dto.Name;&#13;&#10;            menuItem.Price = dto.Price;&#13;&#10;            menuItem.Category = dto.Category;&#13;&#10;        }&#13;&#10;&#13;&#10;        public static MenuItemListDto MenuItemToMenuItemListDto(MenuItem menuItem)&#13;&#10;        {&#13;&#10;            return new MenuItemListDto&#13;&#10;            {&#13;&#10;                Id = menuItem.Id,&#13;&#10;                Name = menuItem.Name,&#13;&#10;                Price = menuItem.Price,&#13;&#10;                Category = menuItem.Category&#13;&#10;            };&#13;&#10;        }&#13;&#10;&#13;&#10;        public static List&lt;MenuItemListDto&gt; MenuItemsToMenuItemListDtos(List&lt;MenuItem&gt; menuItems) =&gt; menuItems.Select(MenuItemToMenuItemListDto).ToList();&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/RestaurantApp.BL/Profiles/OrderProfile.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/RestaurantApp.BL/Profiles/OrderProfile.cs" />
              <option name="originalContent" value="using RestaurantApp.BL.Dtos.Order;&#10;using RestaurantApp.Core.Models;&#10;&#10;namespace RestaurantApp.BL.Profiles&#10;{&#10;    public class OrderProfile&#10;    {&#10;        public static Order OrderCreateDtoToOrder(OrderCreateDto orderCreateDto)&#10;        {&#10;            if (orderCreateDto == null) return null;&#10;&#10;            return new Order&#10;            {&#10;                OrderItems = orderCreateDto.OrderItems?.Select(oiDto =&gt; new OrderItem&#10;                {&#10;                    MenuItemId = oiDto.MenuItemId,&#10;                    Count = oiDto.Count,&#10;                }).ToList() ?? [],&#10;                TableId = orderCreateDto.TableId,&#10;            };&#10;        }&#10;&#10;        public static OrderListDto OrderToOrderListDto(Order order)&#10;        {&#10;            if (order == null) return null;&#10;&#10;            var orderItemsListDtos = order.OrderItems?&#10;                .Select(oi =&gt; OrderItemProfile.OrderItemToOrderItemListDto(oi))&#10;                .ToList() ?? [];&#10;&#10;            return new OrderListDto&#10;            {&#10;                Id = order.Id,&#10;                TotalAmount = order.TotalAmount,&#10;                Date = order.Date,&#10;                OrderItems = orderItemsListDtos,&#10;                TableId = order.TableId,&#10;                TableNo = order.Table?.No,&#10;                TableIsOccupied = order.Table.IsOccupied,&#10;                TableOccupiedAt = order.Table?.OccupiedAt,&#10;                TableReleasedAt = order.Table?.ReleasedAt&#10;            };&#10;        }&#10;&#10;        public static List&lt;OrderListDto&gt; OrdersToOrderListDtos(IEnumerable&lt;Order&gt; orders)&#10;        {&#10;            if (orders == null) return [];&#10;            return orders.Select(o =&gt; OrderToOrderListDto(o)).ToList();&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using RestaurantApp.BL.Dtos.Order;&#13;&#10;using RestaurantApp.Core.Models;&#13;&#10;&#13;&#10;namespace RestaurantApp.BL.Profiles&#13;&#10;{&#13;&#10;    public class OrderProfile&#13;&#10;    {&#13;&#10;        public static Order OrderCreateDtoToOrder(OrderCreateDto orderCreateDto)&#13;&#10;        {&#13;&#10;            if (orderCreateDto == null) return null;&#13;&#10;&#13;&#10;            return new Order&#13;&#10;            {&#13;&#10;                OrderItems = orderCreateDto.OrderItems?.Select(oiDto =&gt; new OrderItem&#13;&#10;                {&#13;&#10;                    MenuItemId = oiDto.MenuItemId,&#13;&#10;                    Count = oiDto.Count,&#13;&#10;                }).ToList() ?? []&#13;&#10;            };&#13;&#10;        }&#13;&#10;&#13;&#10;        public static OrderListDto OrderToOrderListDto(Order order)&#13;&#10;        {&#13;&#10;            if (order == null) return null;&#13;&#10;&#13;&#10;            var orderItemsListDtos = order.OrderItems?&#13;&#10;                .Select(oi =&gt; OrderItemProfile.OrderItemToOrderItemListDto(oi))&#13;&#10;                .ToList() ?? [];&#13;&#10;&#13;&#10;            int menuItemCount = order.OrderItems?.Sum(oi =&gt; oi.Count) ?? 0;&#13;&#10;&#13;&#10;            return new OrderListDto&#13;&#10;            {&#13;&#10;                Id = order.Id,&#13;&#10;                TotalAmount = order.TotalAmount,&#13;&#10;                Date = order.Date,&#13;&#10;                MenuItemCount = menuItemCount,&#13;&#10;                OrderItems = orderItemsListDtos&#13;&#10;            };&#13;&#10;        }&#13;&#10;&#13;&#10;        public static List&lt;OrderListDto&gt; OrdersToOrderListDtos(IEnumerable&lt;Order&gt; orders)&#13;&#10;        {&#13;&#10;            if (orders == null) return [];&#13;&#10;            return orders.Select(o =&gt; OrderToOrderListDto(o)).ToList();&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/RestaurantApp.BL/Services/Concretes/MenuItemService.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/RestaurantApp.BL/Services/Concretes/MenuItemService.cs" />
              <option name="originalContent" value="using RestaurantApp.BL.Dtos.MenuItem;&#10;using RestaurantApp.BL.Profiles; &#10;using RestaurantApp.BL.Services.Interfaces;&#10;using RestaurantApp.Core.Enums;&#10;using RestaurantApp.BL.Exceptions;&#10;using RestaurantApp.Core.Models;&#10;using RestaurantApp.DAL.Repositories.Concretes;&#10;using RestaurantApp.DAL.Repositories.Interfaces;&#10;&#10;namespace RestaurantApp.BL.Services.Concretes&#10;{&#10;    public class MenuItemService : IMenuItemService&#10;    {&#10;        private readonly IRepository&lt;MenuItem&gt; _menuItemRepository;&#10;        public MenuItemService()&#10;        {&#10;            _menuItemRepository = new Repository&lt;MenuItem&gt;(); &#10;        }&#10;        private List&lt;MenuItemListDto&gt; MapMenuItemsToDtoList(List&lt;MenuItem&gt; menuItems) =&gt; MenuItemProfile.MenuItemsToMenuItemListDtos(menuItems);&#10;        &#10;        public async Task AddMenuItemAsync(MenuItemCreateDto menuItemDto)&#10;        {&#10;            if (menuItemDto is null)&#10;                throw new ArgumentNullException(nameof(menuItemDto), &quot;Menu item data cannot be null.&quot;);&#10;&#10;            var existingItem = await _menuItemRepository.GetAllAsync(q =&gt; q.Where(m =&gt; m.Name.ToLower() == menuItemDto.Name.ToLower()));&#10;            if (existingItem.Any())&#10;                throw new DuplicateMenuItemException($&quot;A menu item with the name '{menuItemDto.Name}' already exists.&quot;);&#10;&#10;            if (menuItemDto.Price &lt;= 0)&#10;                throw new InvalidMenuItemPriceException(&quot;Menu item price must be greater than zero.&quot;);&#10;&#10;            if (menuItemDto.Quantity &lt; 0)&#10;                throw new InvalidMenuItemQuantityException(&quot;Menu item quantity must be a positive number.&quot;);&#10;&#10;            if(menuItemDto.CostValue &lt;= 0 &amp;&amp; menuItemDto.CostValue &lt; menuItemDto.Price)&#10;                throw new InvalidMenuItemCostValueException(&quot;The menu item cost value must be greater than zero and less than the price.&quot;);&#10;&#10;            var menuItem = MenuItemProfile.MenuItemCreateDtoToMenuItem(menuItemDto);&#10;            await _menuItemRepository.CreateAsync(menuItem);&#10;            await _menuItemRepository.SaveChangesAsync();&#10;        }&#10;        public async Task EditMenuItemAsync(MenuItemUpdateDto menuItemDto)&#10;        {&#10;            if (menuItemDto is null)&#10;                throw new ArgumentNullException(nameof(menuItemDto), &quot;Menu item update data cannot be null.&quot;);&#10;&#10;            var menuItem = await _menuItemRepository.GetByIdAsync(menuItemDto.Id, useNoTracking:false) ?? &#10;                throw new MenuItemNotFoundException($&quot;Menu item with ID {menuItemDto.Id} not found.&quot;);&#10;&#10;            var duplicate = await _menuItemRepository.GetAllAsync(q =&gt; q.Where(t =&gt; t.Name.ToLower() == menuItemDto.Name.ToLower() &amp;&amp; t.Id != menuItemDto.Id));&#10;            if (duplicate.Any())&#10;                throw new DuplicateMenuItemException($&quot;A menu item with the name '{menuItemDto.Name}' already exists.&quot;);&#10;&#10;            if (menuItemDto.Price &lt;= 0)&#10;                throw new InvalidMenuItemPriceException(&quot;Menu item price must be greater than zero.&quot;);&#10;&#10;            if (menuItemDto.Quantity &lt; 0)&#10;                throw new InvalidMenuItemQuantityException(&quot;Menu item quantity must be a positive number.&quot;);&#10;&#10;            if (menuItemDto.CostValue &lt;= 0 &amp;&amp; menuItemDto.CostValue &lt; menuItemDto.Price)&#10;                throw new InvalidMenuItemCostValueException(&quot;The menu item cost value must be greater than zero and less than the price.&quot;);&#10;&#10;            MenuItemProfile.UpdateMenuItemFromDto(menuItem, menuItemDto);&#10;&#10;            await _menuItemRepository.UpdateAsync(menuItem);&#10;            await _menuItemRepository.SaveChangesAsync();&#10;        }&#10;        public async Task&lt;List&lt;MenuItemListDto&gt;&gt; GetAllMenuItemsAsync()&#10;        {&#10;            var menuItems = await _menuItemRepository.GetAllAsync() ?? throw new MenuItemNotFoundException(&quot;Not found any menu item.&quot;);&#10;            return MapMenuItemsToDtoList(menuItems.ToList());&#10;        }&#10;&#10;        public async Task&lt;List&lt;MenuItemListDto&gt;&gt; GetMenuItemsByCategoryAsync(CategoryEnum category)&#10;        {&#10;            var filteredMenuItems = await _menuItemRepository.GetAllAsync(q =&gt; q.Where(m =&gt; m.Category == category)) ?? throw new MenuItemNotFoundException(&quot;Not found any menu item in this category.&quot;);&#10;            return MapMenuItemsToDtoList(filteredMenuItems.ToList());&#10;        }&#10;        public async Task&lt;List&lt;MenuItemListDto&gt;&gt; GetMenuItemsByPriceIntervalAsync(decimal minPrice, decimal maxPrice)&#10;        {&#10;            var filteredMenuItems = await _menuItemRepository.GetAllAsync(q =&gt; q.Where(m =&gt; m.Price &gt;= minPrice &amp;&amp; m.Price &lt;= maxPrice)) ?? throw new MenuItemNotFoundException(&quot;Not found any menu item in this price interval.&quot;);&#10;            return MapMenuItemsToDtoList(filteredMenuItems.ToList());&#10;        }&#10;        public async Task RemoveMenuItemAsync(int id)&#10;        {&#10;            var menuItem = await _menuItemRepository.GetByIdAsync(id, useNoTracking: false) ?? &#10;                throw new MenuItemNotFoundException($&quot;Menu item with ID {id} not found.&quot;);&#10;            await _menuItemRepository.DeleteAsync(id);&#10;            await _menuItemRepository.SaveChangesAsync();&#10;        }&#10;        public async Task&lt;List&lt;MenuItemListDto&gt;&gt; SearchMenuItemsAsync(string searchValue)&#10;        {&#10;            if (string.IsNullOrWhiteSpace(searchValue))&#10;                return await GetAllMenuItemsAsync();&#10;&#10;            string lowerSearchValue = searchValue.ToLower();&#10;            var filteredMenuItems = await _menuItemRepository.GetAllAsync(q =&gt;&#10;                q.Where(m =&gt; m.Name.ToLower().Contains(lowerSearchValue) ||&#10;                             m.Category.ToString().ToLower().Contains(lowerSearchValue)));&#10;&#10;            return MapMenuItemsToDtoList(filteredMenuItems.ToList());&#10;        }&#10;        public async Task&lt;MenuItemListDto&gt; GetMenuItemByIdAsync(int id)&#10;        {&#10;            var menuItem = await _menuItemRepository.GetByIdAsync(id,useNoTracking:false);&#10;            return MenuItemProfile.MenuItemToMenuItemListDto(menuItem);&#10;        }&#10;        public async Task&lt;bool&gt; DecreaseMenuItemQuantity(int menuItemId, int count)&#10;        {&#10;            var menuItem = await _menuItemRepository.GetByIdAsync(menuItemId, useNoTracking: false) ?? &#10;                throw new MenuItemNotFoundException($&quot;Menu item with ID {menuItemId} not found.&quot;);&#10;            if (menuItem.Quantity &lt; count)&#10;                return false;&#10;&#10;            menuItem.Quantity -= count;&#10;            await _menuItemRepository.UpdateAsync(menuItem);&#10;            await _menuItemRepository.SaveChangesAsync();&#10;            return true;&#10;        }&#10;        public async Task&lt;bool&gt; IncreaseMenuItemQuantity(int menuItemId, int count)&#10;        {&#10;            var menuItem = await _menuItemRepository.GetByIdAsync(menuItemId,useNoTracking:false) ??&#10;                throw new MenuItemNotFoundException($&quot;Menu item with ID {menuItemId} not found.&quot;);&#10;&#10;            menuItem.Quantity += count;&#10;            await _menuItemRepository.UpdateAsync(menuItem);&#10;            await _menuItemRepository.SaveChangesAsync();&#10;            return true;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using RestaurantApp.BL.Dtos.MenuItem;&#13;&#10;using RestaurantApp.BL.Profiles; &#13;&#10;using RestaurantApp.BL.Services.Interfaces;&#13;&#10;using RestaurantApp.Core.Enums;&#13;&#10;using RestaurantApp.BL.Exceptions;&#13;&#10;using RestaurantApp.Core.Models;&#13;&#10;using RestaurantApp.DAL.Repositories.Concretes;&#13;&#10;using RestaurantApp.DAL.Repositories.Interfaces;&#13;&#10;&#13;&#10;namespace RestaurantApp.BL.Services.Concretes&#13;&#10;{&#13;&#10;    public class MenuItemService : IMenuItemService&#13;&#10;    {&#13;&#10;        private readonly IRepository&lt;MenuItem&gt; _menuItemRepository;&#13;&#10;        public MenuItemService()&#13;&#10;        {&#13;&#10;            _menuItemRepository = new Repository&lt;MenuItem&gt;(); &#13;&#10;        }&#13;&#10;        private List&lt;MenuItemListDto&gt; MapMenuItemsToDtoList(List&lt;MenuItem&gt; menuItems) =&gt; MenuItemProfile.MenuItemsToMenuItemListDtos(menuItems);&#13;&#10;        &#13;&#10;        public async Task AddMenuItemAsync(MenuItemCreateDto menuItemDto)&#13;&#10;        {&#13;&#10;            if (menuItemDto is null)&#13;&#10;                throw new ArgumentNullException(nameof(menuItemDto), &quot;Menu item data cannot be null.&quot;);&#13;&#10;&#13;&#10;            var existingItems = await _menuItemRepository.GetAllAsync();&#13;&#10;            if (existingItems.Any(m =&gt; m.Name.ToLower() == menuItemDto.Name.ToLower()))&#13;&#10;                throw new DuplicateMenuItemException($&quot;A menu item with the name '{menuItemDto.Name}' already exists.&quot;);&#13;&#10;&#13;&#10;            if (menuItemDto.Price &lt;= 0)&#13;&#10;                throw new InvalidMenuItemPriceException(&quot;Menu item price must be greater than zero.&quot;);&#13;&#10;&#13;&#10;            var menuItem = MenuItemProfile.MenuItemCreateDtoToMenuItem(menuItemDto);&#13;&#10;            await _menuItemRepository.CreateAsync(menuItem);&#13;&#10;            await _menuItemRepository.SaveChangesAsync();&#13;&#10;        }&#13;&#10;&#13;&#10;        public async Task EditMenuItemAsync(MenuItemUpdateDto menuItemDto)&#13;&#10;        {&#13;&#10;            if (menuItemDto is null)&#13;&#10;                throw new ArgumentNullException(nameof(menuItemDto), &quot;Menu item update data cannot be null.&quot;);&#13;&#10;&#13;&#10;            var menuItem = await _menuItemRepository.GetByIdAsync(menuItemDto.Id) ?? &#13;&#10;                throw new MenuItemNotFoundException($&quot;Menu item with ID {menuItemDto.Id} not found.&quot;);&#13;&#10;&#13;&#10;            var allItems = await _menuItemRepository.GetAllAsync();&#13;&#10;            if (allItems.Any(t =&gt; t.Name.ToLower() == menuItemDto.Name.ToLower() &amp;&amp; t.Id != menuItemDto.Id))&#13;&#10;                throw new DuplicateMenuItemException($&quot;A menu item with the name '{menuItemDto.Name}' already exists.&quot;);&#13;&#10;&#13;&#10;            if (menuItemDto.Price &lt;= 0)&#13;&#10;                throw new InvalidMenuItemPriceException(&quot;Menu item price must be greater than zero.&quot;);&#13;&#10;&#13;&#10;            MenuItemProfile.UpdateMenuItemFromDto(menuItem, menuItemDto);&#13;&#10;&#13;&#10;            await _menuItemRepository.UpdateAsync(menuItem);&#13;&#10;            await _menuItemRepository.SaveChangesAsync();&#13;&#10;        }&#13;&#10;&#13;&#10;        public async Task&lt;List&lt;MenuItemListDto&gt;&gt; GetAllMenuItemsAsync()&#13;&#10;        {&#13;&#10;            var menuItems = await _menuItemRepository.GetAllAsync();&#13;&#10;            if (!menuItems.Any())&#13;&#10;                throw new MenuItemNotFoundException(&quot;Not found any menu item.&quot;);&#13;&#10;            return MapMenuItemsToDtoList(menuItems);&#13;&#10;        }&#13;&#10;&#13;&#10;        public async Task&lt;List&lt;MenuItemListDto&gt;&gt; GetMenuItemsByCategoryAsync(CategoryEnum category)&#13;&#10;        {&#13;&#10;            var allItems = await _menuItemRepository.GetAllAsync();&#13;&#10;            var filteredMenuItems = allItems.Where(m =&gt; m.Category == category).ToList();&#13;&#10;            if (!filteredMenuItems.Any())&#13;&#10;                throw new MenuItemNotFoundException(&quot;Not found any menu item in this category.&quot;);&#13;&#10;            return MapMenuItemsToDtoList(filteredMenuItems);&#13;&#10;        }&#13;&#10;&#13;&#10;        public async Task&lt;List&lt;MenuItemListDto&gt;&gt; GetMenuItemsByPriceIntervalAsync(decimal minPrice, decimal maxPrice)&#13;&#10;        {&#13;&#10;            var allItems = await _menuItemRepository.GetAllAsync();&#13;&#10;            var filteredMenuItems = allItems.Where(m =&gt; m.Price &gt;= minPrice &amp;&amp; m.Price &lt;= maxPrice).ToList();&#13;&#10;            if (!filteredMenuItems.Any())&#13;&#10;                throw new MenuItemNotFoundException(&quot;Not found any menu item in this price interval.&quot;);&#13;&#10;            return MapMenuItemsToDtoList(filteredMenuItems);&#13;&#10;        }&#13;&#10;&#13;&#10;        public async Task RemoveMenuItemAsync(int id)&#13;&#10;        {&#13;&#10;            var menuItem = await _menuItemRepository.GetByIdAsync(id) ?? &#13;&#10;                throw new MenuItemNotFoundException($&quot;Menu item with ID {id} not found.&quot;);&#13;&#10;            await _menuItemRepository.DeleteAsync(id);&#13;&#10;            await _menuItemRepository.SaveChangesAsync();&#13;&#10;        }&#13;&#10;&#13;&#10;        public async Task&lt;List&lt;MenuItemListDto&gt;&gt; SearchMenuItemsAsync(string searchValue)&#13;&#10;        {&#13;&#10;            if (string.IsNullOrWhiteSpace(searchValue))&#13;&#10;                return await GetAllMenuItemsAsync();&#13;&#10;&#13;&#10;            string lowerSearchValue = searchValue.ToLower();&#13;&#10;            var allItems = await _menuItemRepository.GetAllAsync();&#13;&#10;            var filteredMenuItems = allItems.Where(m =&gt; &#13;&#10;                m.Name.ToLower().Contains(lowerSearchValue) ||&#13;&#10;                m.Category.ToString().ToLower().Contains(lowerSearchValue)).ToList();&#13;&#10;&#13;&#10;            return MapMenuItemsToDtoList(filteredMenuItems);&#13;&#10;        }&#13;&#10;&#13;&#10;        public async Task&lt;MenuItemListDto&gt; GetMenuItemByIdAsync(int id)&#13;&#10;        {&#13;&#10;            var menuItem = await _menuItemRepository.GetByIdAsync(id) ?? &#13;&#10;                throw new MenuItemNotFoundException($&quot;Menu item with ID {id} not found.&quot;);&#13;&#10;            return MenuItemProfile.MenuItemToMenuItemListDto(menuItem);&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/RestaurantApp.BL/Services/Concretes/OrderService.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/RestaurantApp.BL/Services/Concretes/OrderService.cs" />
              <option name="originalContent" value="using Microsoft.EntityFrameworkCore; &#10;using RestaurantApp.BL.Dtos.Order;&#10;using RestaurantApp.BL.Profiles; &#10;using RestaurantApp.BL.Services.Interfaces;&#10;using RestaurantApp.BL.Exceptions;&#10;using RestaurantApp.Core.Models;&#10;using RestaurantApp.DAL.Repositories.Concretes;&#10;using RestaurantApp.DAL.Repositories.Interfaces;&#10;&#10;namespace RestaurantApp.BL.Services.Concretes&#10;{&#10;    public class OrderService : IOrderService&#10;    {&#10;        private readonly IRepository&lt;Order&gt; _orderRepository;&#10;        private readonly IMenuItemService _menuItemService;&#10;        private readonly ITableService _tableService;&#10;        public OrderService(IMenuItemService menuItemService, ITableService tableService)&#10;        {&#10;            _orderRepository = new Repository&lt;Order&gt;();&#10;            _menuItemService = menuItemService;&#10;            _tableService = tableService; &#10;        }&#10;        private OrderListDto MapOrderToDto(Order order) =&gt; OrderProfile.OrderToOrderListDto(order);&#10;        private List&lt;OrderListDto&gt; MapOrdersToDtoList(IEnumerable&lt;Order&gt; orders) =&gt; OrderProfile.OrdersToOrderListDtos(orders);&#10;        public async Task AddOrderAsync(OrderCreateDto orderDto)&#10;        {&#10;            if (orderDto is null)&#10;                throw new ArgumentNullException(nameof(orderDto), &quot;Order data cannot be null.&quot;);&#10;            if (!orderDto.OrderItems.Any())&#10;                throw new InvalidOrderDataException(&quot;An order must contain at least one item.&quot;);&#10;&#10;            Order order = new Order&#10;            {&#10;                Date = DateTime.Now, &#10;                OrderItems = [],&#10;                TableId = orderDto.TableId&#10;&#9;&#9;&#9;};&#10;&#10;            decimal calculatedTotalAmount = 0;&#10;&#10;            foreach (var itemDto in orderDto.OrderItems)&#10;            {&#10;                var menuItem = await _menuItemService.GetMenuItemByIdAsync(itemDto.MenuItemId) ??&#10;                    throw new MenuItemNotFoundException($&quot;Menu item with ID {itemDto.MenuItemId} not found for order item.&quot;);&#10;                if (itemDto.Count &lt;= 0)&#10;                    throw new InvalidOrderDataException($&quot;Count for menu item {menuItem.Name} must be positive.&quot;);&#10;&#10;                bool decreased = await _menuItemService.DecreaseMenuItemQuantity(itemDto.MenuItemId, itemDto.Count);&#10;                if (!decreased)&#10;                {&#10;                    throw new InvalidMenuItemQuantityException($&quot;Not enough '{menuItem.Name}' in stock. Available: {menuItem.Quantity}. Requested: {itemDto.Count}.&quot;);&#10;                }&#10;&#10;                order.OrderItems.Add(new OrderItem&#10;                {&#10;                    MenuItemId = itemDto.MenuItemId,&#10;                    Count = itemDto.Count,&#10;                });&#10;                calculatedTotalAmount += menuItem.Price * itemDto.Count;&#10;            }&#10;&#10;            order.TotalAmount = calculatedTotalAmount;&#10;            await _tableService.OccupyTableAsync(order.TableId);&#10;            await _orderRepository.CreateAsync(order);&#10;            await _orderRepository.SaveChangesAsync(); &#10;        }&#10;        public async Task RemoveOrderAsync(int orderId)&#10;        {&#10;            Order order = await _orderRepository.GetByIdAsync(orderId,&#10;                                                              q =&gt; q.Include(t =&gt; t.Table)&#10;                                                                    .Include(o =&gt; o.OrderItems)&#10;                                                                        .ThenInclude(oi =&gt; oi.MenuItem),&#10;                                                              false) &#10;                        ?? throw new OrderNotFoundException($&quot;Order with ID {orderId} not found.&quot;);&#10;            foreach (var orderItem in order.OrderItems)&#10;            {&#10;                await _menuItemService.IncreaseMenuItemQuantity(orderItem.MenuItemId, orderItem.Count);&#10;            }&#10;&#10;            await _tableService.ReleaseTableAsync(order.TableId);&#10;            await _orderRepository.DeleteAsync(orderId);&#10;            await _orderRepository.SaveChangesAsync();&#10;        }&#10;        public async Task&lt;List&lt;OrderListDto&gt;&gt; GetOrdersByDatesIntervalAsync(DateTime startDate, DateTime endDate)&#10;        {&#10;            List&lt;Order&gt; orders = await _orderRepository.GetAllAsync(q =&gt; q.Include(t =&gt; t.Table).Include(o =&gt; o.OrderItems).ThenInclude(oi =&gt; oi.MenuItem).Where(o =&gt; o.Date.Date &gt;= startDate.Date &amp;&amp; o.Date.Date &lt;= endDate.Date)) ?? throw new OrderNotFoundException($&quot;Order not found in this interval.&quot;);&#10;&#10;            return MapOrdersToDtoList(orders);&#10;        }&#10;        public async Task&lt;List&lt;OrderListDto&gt;&gt; GetOrdersByDateAsync(DateTime date)&#10;        {&#10;            List&lt;Order&gt; orders = await _orderRepository.GetAllAsync(q =&gt;q.Include(t =&gt; t.Table).Include(o =&gt; o.OrderItems).ThenInclude(oi =&gt; oi.MenuItem).Where(o =&gt; o.Date.Date == date.Date)) ?? throw new OrderNotFoundException($&quot;Order not found.&quot;);&#10;&#10;            return MapOrdersToDtoList(orders);&#10;        }&#10;        public async Task&lt;List&lt;OrderListDto&gt;&gt; GetOrdersByPriceIntervalAsync(decimal minPrice, decimal maxPrice)&#10;        {&#10;            List&lt;Order&gt; orders = await _orderRepository.GetAllAsync(q =&gt; q.Include(t =&gt; t.Table).Include(o =&gt; o.OrderItems).ThenInclude(oi =&gt; oi.MenuItem).Where(o =&gt; o.TotalAmount &gt;= minPrice &amp;&amp; o.TotalAmount &lt;= maxPrice)) ?? throw new OrderNotFoundException($&quot;Order not found in this interval.&quot;);&#10;&#10;            return MapOrdersToDtoList(orders);&#10;        }&#10;        public async Task&lt;List&lt;OrderListDto&gt;&gt; GetAllOrdersAsync()&#10;        {&#10;            List&lt;Order&gt; orders = await _orderRepository.GetAllAsync(q =&gt;q.Include(o =&gt; o.Table) &#10;                                                                         .Include(o =&gt; o.OrderItems)&#10;                                                                         .ThenInclude(oi =&gt; oi.MenuItem)) ?? throw new OrderNotFoundException($&quot;Order not found.&quot;);&#10;            return MapOrdersToDtoList(orders.ToList());&#10;        }&#10;        public async Task&lt;OrderListDto&gt; GetOrderByNoAsync(int orderId)&#10;        {&#10;            Order order = await _orderRepository.GetByIdAsync(orderId, q =&gt; q.Include(t=&gt;t.Table).Include(o =&gt; o.OrderItems).ThenInclude(oi =&gt; oi.MenuItem), useNoTracking:false) ?? throw new OrderNotFoundException($&quot;Order with ID {orderId} not found.&quot;);&#10;            return MapOrderToDto(order);&#10;        }&#10;&#10;        public async Task CompleteOrderAsync(int orderId)&#10;        {&#10;            var order = await _orderRepository.GetByIdAsync(orderId, useNoTracking: false) ?? &#10;                throw new OrderNotFoundException($&quot;Order with ID {orderId} not found.&quot;);&#10;&#10;            await _tableService.ReleaseTableAsync(order.TableId, order.TotalAmount); &#10;&#9;&#9;}&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using Microsoft.EntityFrameworkCore; &#13;&#10;using RestaurantApp.BL.Dtos.Order;&#13;&#10;using RestaurantApp.BL.Profiles; &#13;&#10;using RestaurantApp.BL.Services.Interfaces;&#13;&#10;using RestaurantApp.BL.Exceptions;&#13;&#10;using RestaurantApp.Core.Models;&#13;&#10;using RestaurantApp.DAL.Repositories.Concretes;&#13;&#10;using RestaurantApp.DAL.Repositories.Interfaces;&#13;&#10;&#13;&#10;namespace RestaurantApp.BL.Services.Concretes&#13;&#10;{&#13;&#10;    public class OrderService : IOrderService&#13;&#10;    {&#13;&#10;        private readonly IRepository&lt;Order&gt; _orderRepository;&#13;&#10;        private readonly IMenuItemService _menuItemService;&#13;&#10;        &#13;&#10;        public OrderService(IMenuItemService menuItemService)&#13;&#10;        {&#13;&#10;            _orderRepository = new Repository&lt;Order&gt;();&#13;&#10;            _menuItemService = menuItemService;&#13;&#10;        }&#13;&#10;        &#13;&#10;        private OrderListDto MapOrderToDto(Order order) =&gt; OrderProfile.OrderToOrderListDto(order);&#13;&#10;        private List&lt;OrderListDto&gt; MapOrdersToDtoList(IEnumerable&lt;Order&gt; orders) =&gt; OrderProfile.OrdersToOrderListDtos(orders);&#13;&#10;        &#13;&#10;        public async Task AddOrderAsync(OrderCreateDto orderDto)&#13;&#10;        {&#13;&#10;            if (orderDto is null)&#13;&#10;                throw new ArgumentNullException(nameof(orderDto), &quot;Order data cannot be null.&quot;);&#13;&#10;            if (!orderDto.OrderItems.Any())&#13;&#10;                throw new InvalidOrderDataException(&quot;An order must contain at least one item.&quot;);&#13;&#10;&#13;&#10;            Order order = new Order&#13;&#10;            {&#13;&#10;                Date = DateTime.Now, &#13;&#10;                OrderItems = []&#13;&#10;            };&#13;&#10;&#13;&#10;            decimal calculatedTotalAmount = 0;&#13;&#10;&#13;&#10;            foreach (var itemDto in orderDto.OrderItems)&#13;&#10;            {&#13;&#10;                var menuItem = await _menuItemService.GetMenuItemByIdAsync(itemDto.MenuItemId) ??&#13;&#10;                    throw new MenuItemNotFoundException($&quot;Menu item with ID {itemDto.MenuItemId} not found for order item.&quot;);&#13;&#10;                if (itemDto.Count &lt;= 0)&#13;&#10;                    throw new InvalidOrderDataException($&quot;Count for menu item {menuItem.Name} must be positive.&quot;);&#13;&#10;&#13;&#10;                order.OrderItems.Add(new OrderItem&#13;&#10;                {&#13;&#10;                    MenuItemId = itemDto.MenuItemId,&#13;&#10;                    Count = itemDto.Count,&#13;&#10;                });&#13;&#10;                calculatedTotalAmount += menuItem.Price * itemDto.Count;&#13;&#10;            }&#13;&#10;&#13;&#10;            order.TotalAmount = calculatedTotalAmount;&#13;&#10;            await _orderRepository.CreateAsync(order);&#13;&#10;            await _orderRepository.SaveChangesAsync(); &#13;&#10;        }&#13;&#10;        &#13;&#10;        public async Task RemoveOrderAsync(int orderId)&#13;&#10;        {&#13;&#10;            var order = await _orderRepository.GetByIdAsync(orderId) ?? &#13;&#10;                throw new OrderNotFoundException($&quot;Order with ID {orderId} not found.&quot;);&#13;&#10;&#13;&#10;            await _orderRepository.DeleteAsync(orderId);&#13;&#10;            await _orderRepository.SaveChangesAsync();&#13;&#10;        }&#13;&#10;        &#13;&#10;        public async Task&lt;List&lt;OrderListDto&gt;&gt; GetOrdersByDatesIntervalAsync(DateTime startDate, DateTime endDate)&#13;&#10;        {&#13;&#10;            var allOrders = await _orderRepository.GetAllAsync();&#13;&#10;            var filteredOrders = allOrders.Where(o =&gt; o.Date.Date &gt;= startDate.Date &amp;&amp; o.Date.Date &lt;= endDate.Date).ToList();&#13;&#10;            &#13;&#10;            if (!filteredOrders.Any())&#13;&#10;                throw new OrderNotFoundException($&quot;Order not found in this interval.&quot;);&#13;&#10;&#13;&#10;            return MapOrdersToDtoList(filteredOrders);&#13;&#10;        }&#13;&#10;        &#13;&#10;        public async Task&lt;List&lt;OrderListDto&gt;&gt; GetOrdersByDateAsync(DateTime date)&#13;&#10;        {&#13;&#10;            var allOrders = await _orderRepository.GetAllAsync();&#13;&#10;            var filteredOrders = allOrders.Where(o =&gt; o.Date.Date == date.Date).ToList();&#13;&#10;            &#13;&#10;            if (!filteredOrders.Any())&#13;&#10;                throw new OrderNotFoundException($&quot;Order not found.&quot;);&#13;&#10;&#13;&#10;            return MapOrdersToDtoList(filteredOrders);&#13;&#10;        }&#13;&#10;        &#13;&#10;        public async Task&lt;List&lt;OrderListDto&gt;&gt; GetOrdersByPriceIntervalAsync(decimal minPrice, decimal maxPrice)&#13;&#10;        {&#13;&#10;            var allOrders = await _orderRepository.GetAllAsync();&#13;&#10;            var filteredOrders = allOrders.Where(o =&gt; o.TotalAmount &gt;= minPrice &amp;&amp; o.TotalAmount &lt;= maxPrice).ToList();&#13;&#10;            &#13;&#10;            if (!filteredOrders.Any())&#13;&#10;                throw new OrderNotFoundException($&quot;Order not found in this interval.&quot;);&#13;&#10;&#13;&#10;            return MapOrdersToDtoList(filteredOrders);&#13;&#10;        }&#13;&#10;        &#13;&#10;        public async Task&lt;List&lt;OrderListDto&gt;&gt; GetAllOrdersAsync()&#13;&#10;        {&#13;&#10;            var orders = await _orderRepository.GetAllAsync();&#13;&#10;            if (!orders.Any())&#13;&#10;                throw new OrderNotFoundException($&quot;Order not found.&quot;);&#13;&#10;            return MapOrdersToDtoList(orders);&#13;&#10;        }&#13;&#10;        &#13;&#10;        public async Task&lt;OrderListDto&gt; GetOrderByNoAsync(int orderId)&#13;&#10;        {&#13;&#10;            var order = await _orderRepository.GetByIdAsync(orderId) ?? &#13;&#10;                throw new OrderNotFoundException($&quot;Order with ID {orderId} not found.&quot;);&#13;&#10;            return MapOrderToDto(order);&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/RestaurantApp.BL/Services/Interfaces/IMenuItemService.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/RestaurantApp.BL/Services/Interfaces/IMenuItemService.cs" />
              <option name="originalContent" value="using RestaurantApp.BL.Dtos.MenuItem;&#10;using RestaurantApp.Core.Enums;&#10;&#10;namespace RestaurantApp.BL.Services.Interfaces&#10;{&#10;    public interface IMenuItemService&#10;    {&#10;        Task AddMenuItemAsync(MenuItemCreateDto menuItemDto);&#10;        Task RemoveMenuItemAsync(int id);&#10;        Task EditMenuItemAsync(MenuItemUpdateDto menuItemDto);&#10;        Task&lt;List&lt;MenuItemListDto&gt;&gt; GetAllMenuItemsAsync();&#10;        Task&lt;MenuItemListDto&gt; GetMenuItemByIdAsync(int id); &#10;        Task&lt;List&lt;MenuItemListDto&gt;&gt; GetMenuItemsByCategoryAsync(CategoryEnum category);&#10;        Task&lt;List&lt;MenuItemListDto&gt;&gt; GetMenuItemsByPriceIntervalAsync(decimal minPrice, decimal maxPrice);&#10;        Task&lt;List&lt;MenuItemListDto&gt;&gt; SearchMenuItemsAsync(string searchValue);&#10;        Task&lt;bool&gt; DecreaseMenuItemQuantity(int menuItemId, int count);&#10;        Task&lt;bool&gt; IncreaseMenuItemQuantity(int menuItemId, int count);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using RestaurantApp.BL.Dtos.MenuItem;&#10;using RestaurantApp.Core.Enums;&#10;&#10;namespace RestaurantApp.BL.Services.Interfaces&#10;{&#10;    public interface IMenuItemService&#10;    {&#10;        Task AddMenuItemAsync(MenuItemCreateDto menuItemDto);&#10;        Task RemoveMenuItemAsync(int id);&#10;        Task EditMenuItemAsync(MenuItemUpdateDto menuItemDto);&#10;        Task&lt;List&lt;MenuItemListDto&gt;&gt; GetAllMenuItemsAsync();&#10;        Task&lt;MenuItemListDto&gt; GetMenuItemByIdAsync(int id); &#10;        Task&lt;List&lt;MenuItemListDto&gt;&gt; GetMenuItemsByCategoryAsync(CategoryEnum category);&#10;        Task&lt;List&lt;MenuItemListDto&gt;&gt; GetMenuItemsByPriceIntervalAsync(decimal minPrice, decimal maxPrice);&#10;        Task&lt;List&lt;MenuItemListDto&gt;&gt; SearchMenuItemsAsync(string searchValue);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/RestaurantApp.BL/Services/Interfaces/IOrderService.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/RestaurantApp.BL/Services/Interfaces/IOrderService.cs" />
              <option name="originalContent" value="using RestaurantApp.BL.Dtos.Order;&#10;&#10;namespace RestaurantApp.BL.Services.Interfaces&#10;{&#10;    public interface IOrderService&#10;    {&#10;        Task AddOrderAsync(OrderCreateDto orderDto);&#10;        Task RemoveOrderAsync(int orderId);&#10;        Task&lt;List&lt;OrderListDto&gt;&gt; GetOrdersByDatesIntervalAsync(DateTime startDate, DateTime endDate);&#10;        Task&lt;List&lt;OrderListDto&gt;&gt; GetOrdersByDateAsync(DateTime date);&#10;        Task&lt;List&lt;OrderListDto&gt;&gt; GetOrdersByPriceIntervalAsync(decimal minPrice, decimal maxPrice);&#10;        Task&lt;OrderListDto&gt; GetOrderByNoAsync(int orderId);&#10;        Task&lt;List&lt;OrderListDto&gt;&gt; GetAllOrdersAsync();&#10;        Task CompleteOrderAsync(int orderId);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using RestaurantApp.BL.Dtos.Order;&#13;&#10;&#13;&#10;namespace RestaurantApp.BL.Services.Interfaces&#13;&#10;{&#13;&#10;    public interface IOrderService&#13;&#10;    {&#13;&#10;        Task AddOrderAsync(OrderCreateDto orderDto);&#13;&#10;        Task RemoveOrderAsync(int orderId);&#13;&#10;        Task&lt;List&lt;OrderListDto&gt;&gt; GetOrdersByDatesIntervalAsync(DateTime startDate, DateTime endDate);&#13;&#10;        Task&lt;List&lt;OrderListDto&gt;&gt; GetOrdersByDateAsync(DateTime date);&#13;&#10;        Task&lt;List&lt;OrderListDto&gt;&gt; GetOrdersByPriceIntervalAsync(decimal minPrice, decimal maxPrice);&#13;&#10;        Task&lt;OrderListDto&gt; GetOrderByNoAsync(int orderId);&#13;&#10;        Task&lt;List&lt;OrderListDto&gt;&gt; GetAllOrdersAsync();&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/RestaurantApp.Core/Models/MenuItem.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/RestaurantApp.Core/Models/MenuItem.cs" />
              <option name="originalContent" value="using RestaurantApp.Core.Enums;&#10;using RestaurantApp.Core.Models.Common;&#10;&#10;namespace RestaurantApp.Core.Models&#10;{&#10;    public class MenuItem : BaseEntity&#10;    {&#10;        public string Name { get; set; }&#10;        public decimal Price { get; set; }&#10;        public CategoryEnum Category { get; set; }&#10;        public int Quantity { get; set; }&#10;        public decimal CostValue { get; set; }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using RestaurantApp.Core.Enums;&#13;&#10;using RestaurantApp.Core.Models.Common;&#13;&#10;&#13;&#10;namespace RestaurantApp.Core.Models&#13;&#10;{&#13;&#10;    public class MenuItem : BaseEntity&#13;&#10;    {&#13;&#10;        public string Name { get; set; }&#13;&#10;        public decimal Price { get; set; }&#13;&#10;        public CategoryEnum Category { get; set; }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/RestaurantApp.Core/Models/Order.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/RestaurantApp.Core/Models/Order.cs" />
              <option name="originalContent" value="using RestaurantApp.Core.Models.Common;&#10;&#10;namespace RestaurantApp.Core.Models&#10;{&#10;    public class Order : BaseEntity&#10;    {&#10;        public decimal TotalAmount { get; set; }&#10;        public DateTime Date { get; set; }&#10;        public List&lt;OrderItem&gt; OrderItems { get; set; }&#10;        public int? TableId { get; set; }&#10;        public Table? Table { get; set; }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using RestaurantApp.Core.Models.Common;&#13;&#10;&#13;&#10;namespace RestaurantApp.Core.Models&#13;&#10;{&#13;&#10;    public class Order : BaseEntity&#13;&#10;    {&#13;&#10;        public decimal TotalAmount { get; set; }&#13;&#10;        public DateTime Date { get; set; }&#13;&#10;        public List&lt;OrderItem&gt; OrderItems { get; set; }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/RestaurantApp.DAL/Data/Configurations/MenuItemConfiguration.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/RestaurantApp.DAL/Data/Configurations/MenuItemConfiguration.cs" />
              <option name="originalContent" value="using Microsoft.EntityFrameworkCore;&#10;using Microsoft.EntityFrameworkCore.Metadata.Builders;&#10;using RestaurantApp.Core.Enums;&#10;using RestaurantApp.Core.Models;&#10;&#10;namespace RestaurantApp.DAL.Data.Configurations&#10;{&#10;    public class MenuItemConfiguration : IEntityTypeConfiguration&lt;MenuItem&gt;&#10;    {&#10;        public void Configure(EntityTypeBuilder&lt;MenuItem&gt; builder)&#10;        {&#10;            builder.HasKey(mi =&gt; mi.Id);&#10;&#10;            builder.Property(mi =&gt; mi.Name)&#10;                   .IsRequired()&#10;                   .HasMaxLength(100);&#10;&#10;            builder.Property(mi =&gt; mi.Price)&#10;                   .IsRequired()&#10;                   .HasColumnType(&quot;decimal(18,2)&quot;); &#10;&#10;&#10;            builder.Property(mi =&gt; mi.Category)&#10;                   .IsRequired();&#10;&#10;            builder.Property(mi =&gt; mi.Quantity)&#10;                   .IsRequired()&#10;                   .HasDefaultValue(0);&#10;&#10;            builder.Property(mi =&gt; mi.CostValue)&#10;                    .IsRequired();&#10;&#10;            builder.HasData(&#10;                new MenuItem { Id = 1, Name = &quot;Classic Burger&quot;, Price = 12.50m, CostValue = 6.00m, Category = CategoryEnum.MainCourse, Quantity = 10 },&#10;                new MenuItem { Id = 2, Name = &quot;Caesar Salad&quot;, Price = 9.00m, CostValue = 4.00m, Category = CategoryEnum.Salad, Quantity = 10 },&#10;                new MenuItem { Id = 3, Name = &quot;Coca-Cola&quot;, Price = 3.00m, CostValue = 1.00m, Category = CategoryEnum.Beverage, Quantity = 10 },&#10;                new MenuItem { Id = 4, Name = &quot;Fries&quot;, Price = 4.50m, CostValue = 1.50m, Category = CategoryEnum.SideDish, Quantity = 10 },&#10;                new MenuItem { Id = 5, Name = &quot;Chocolate Lava Cake&quot;, Price = 7.50m, CostValue = 3.50m, Category = CategoryEnum.Dessert, Quantity = 10 },&#10;                new MenuItem { Id = 6, Name = &quot;Spaghetti Bolognese&quot;, Price = 15.00m, CostValue = 7.00m, Category = CategoryEnum.MainCourse, Quantity = 10 },&#10;                new MenuItem { Id = 7, Name = &quot;Orange Juice&quot;, Price = 4.00m, CostValue = 1.20m, Category = CategoryEnum.Beverage, Quantity = 10 },&#10;                new MenuItem { Id = 8, Name = &quot;Chicken Wings (6 pcs)&quot;, Price = 10.00m, CostValue = 5.00m, Category = CategoryEnum.Appetizer, Quantity = 10 },&#10;                new MenuItem { Id = 9, Name = &quot;Cheesecake&quot;, Price = 6.50m, CostValue = 3.00m, Category = CategoryEnum.Dessert, Quantity = 10 },&#10;                new MenuItem { Id = 10, Name = &quot;Vegetable Pizza&quot;, Price = 14.00m, CostValue = 6.00m, Category = CategoryEnum.MainCourse, Quantity = 10 }&#10;            );&#10;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using Microsoft.EntityFrameworkCore;&#13;&#10;using Microsoft.EntityFrameworkCore.Metadata.Builders;&#13;&#10;using RestaurantApp.Core.Enums;&#13;&#10;using RestaurantApp.Core.Models;&#13;&#10;&#13;&#10;namespace RestaurantApp.DAL.Data.Configurations&#13;&#10;{&#13;&#10;    public class MenuItemConfiguration : IEntityTypeConfiguration&lt;MenuItem&gt;&#13;&#10;    {&#13;&#10;        public void Configure(EntityTypeBuilder&lt;MenuItem&gt; builder)&#13;&#10;        {&#13;&#10;            builder.HasKey(mi =&gt; mi.Id);&#13;&#10;&#13;&#10;            builder.Property(mi =&gt; mi.Name)&#13;&#10;                   .IsRequired()&#13;&#10;                   .HasMaxLength(100);&#13;&#10;&#13;&#10;            builder.Property(mi =&gt; mi.Price)&#13;&#10;                   .IsRequired()&#13;&#10;                   .HasColumnType(&quot;decimal(18,2)&quot;); &#13;&#10;&#13;&#10;&#13;&#10;            builder.Property(mi =&gt; mi.Category)&#13;&#10;                   .IsRequired();&#13;&#10;&#13;&#10;            builder.HasData(&#13;&#10;                new MenuItem { Id = 1, Name = &quot;Classic Burger&quot;, Price = 12.50m, Category = CategoryEnum.MainCourse },&#13;&#10;                new MenuItem { Id = 2, Name = &quot;Caesar Salad&quot;, Price = 9.00m, Category = CategoryEnum.Salad },&#13;&#10;                new MenuItem { Id = 3, Name = &quot;Coca-Cola&quot;, Price = 3.00m, Category = CategoryEnum.Beverage },&#13;&#10;                new MenuItem { Id = 4, Name = &quot;Fries&quot;, Price = 4.50m, Category = CategoryEnum.SideDish },&#13;&#10;                new MenuItem { Id = 5, Name = &quot;Chocolate Lava Cake&quot;, Price = 7.50m, Category = CategoryEnum.Dessert },&#13;&#10;                new MenuItem { Id = 6, Name = &quot;Spaghetti Bolognese&quot;, Price = 15.00m, Category = CategoryEnum.MainCourse },&#13;&#10;                new MenuItem { Id = 7, Name = &quot;Orange Juice&quot;, Price = 4.00m, Category = CategoryEnum.Beverage },&#13;&#10;                new MenuItem { Id = 8, Name = &quot;Chicken Wings (6 pcs)&quot;, Price = 10.00m, Category = CategoryEnum.Appetizer },&#13;&#10;                new MenuItem { Id = 9, Name = &quot;Cheesecake&quot;, Price = 6.50m, Category = CategoryEnum.Dessert },&#13;&#10;                new MenuItem { Id = 10, Name = &quot;Vegetable Pizza&quot;, Price = 14.00m, Category = CategoryEnum.MainCourse }&#13;&#10;            );&#13;&#10;&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/RestaurantApp.DAL/Data/Configurations/OrderConfiguration.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/RestaurantApp.DAL/Data/Configurations/OrderConfiguration.cs" />
              <option name="originalContent" value="using Microsoft.EntityFrameworkCore;&#10;using Microsoft.EntityFrameworkCore.Metadata.Builders;&#10;using RestaurantApp.Core.Models;&#10;&#10;namespace RestaurantApp.DAL.Data.Configurations&#10;{&#10;    public class OrderConfiguration : IEntityTypeConfiguration&lt;Order&gt;&#10;    {&#10;        public void Configure(EntityTypeBuilder&lt;Order&gt; builder)&#10;        {&#10;            builder.HasKey(o =&gt; o.Id);&#10;&#10;            builder.Property(o =&gt; o.Date)&#10;                   .IsRequired()&#10;                   .HasDefaultValueSql(&quot;GETDATE()&quot;);&#10;&#10;            builder.Property(o =&gt; o.TotalAmount)&#10;                   .IsRequired()&#10;                   .HasColumnType(&quot;decimal(18,2)&quot;);&#10;&#10;            builder.HasMany(o =&gt; o.OrderItems)&#10;                   .WithOne(oi =&gt; oi.Order)&#10;                   .HasForeignKey(oi =&gt; oi.OrderId)&#10;                   .OnDelete(DeleteBehavior.Cascade);&#10;&#10;            builder.HasOne(o =&gt; o.Table)&#10;                   .WithMany(t =&gt; t.Orders)&#10;                   .HasForeignKey(o =&gt; o.TableId)&#10;                   .OnDelete(DeleteBehavior.SetNull);&#10;&#10;            builder.HasData(&#10;                new Order { Id = 1, Date = new DateTime(2025, 7, 1, 12, 0, 0), TotalAmount = 20.00m, TableId = 1 },&#10;                new Order { Id = 2, Date = new DateTime(2025, 7, 3, 14, 30, 0), TotalAmount = 19.00m, TableId = 2 },&#10;                new Order { Id = 3, Date = new DateTime(2025, 7, 5, 18, 0, 0), TotalAmount = 22.50m, TableId = 1 },&#10;                new Order { Id = 4, Date = new DateTime(2025, 7, 7, 11, 45, 0), TotalAmount = 24.50m, TableId = 3 }&#10;            );&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using Microsoft.EntityFrameworkCore;&#13;&#10;using Microsoft.EntityFrameworkCore.Metadata.Builders;&#13;&#10;using RestaurantApp.Core.Models;&#13;&#10;&#13;&#10;namespace RestaurantApp.DAL.Data.Configurations&#13;&#10;{&#13;&#10;    public class OrderConfiguration : IEntityTypeConfiguration&lt;Order&gt;&#13;&#10;    {&#13;&#10;        public void Configure(EntityTypeBuilder&lt;Order&gt; builder)&#13;&#10;        {&#13;&#10;            builder.HasKey(o =&gt; o.Id);&#13;&#10;&#13;&#10;            builder.Property(o =&gt; o.Date)&#13;&#10;                   .IsRequired()&#13;&#10;                   .HasDefaultValueSql(&quot;GETDATE()&quot;);&#13;&#10;&#13;&#10;            builder.Property(o =&gt; o.TotalAmount)&#13;&#10;                   .IsRequired()&#13;&#10;                   .HasColumnType(&quot;decimal(18,2)&quot;);&#13;&#10;&#13;&#10;            builder.HasMany(o =&gt; o.OrderItems)&#13;&#10;                   .WithOne(oi =&gt; oi.Order)&#13;&#10;                   .HasForeignKey(oi =&gt; oi.OrderId)&#13;&#10;                   .OnDelete(DeleteBehavior.Cascade);&#13;&#10;&#13;&#10;            builder.HasData(&#13;&#10;                new Order { Id = 1, Date = new DateTime(2025, 7, 1, 12, 0, 0), TotalAmount = 20.00m },&#13;&#10;                new Order { Id = 2, Date = new DateTime(2025, 7, 3, 14, 30, 0), TotalAmount = 19.00m },&#13;&#10;                new Order { Id = 3, Date = new DateTime(2025, 7, 5, 18, 0, 0), TotalAmount = 22.50m },&#13;&#10;                new Order { Id = 4, Date = new DateTime(2025, 7, 7, 11, 45, 0), TotalAmount = 24.50m }&#13;&#10;            );&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/RestaurantApp.DAL/Data/RestaurantDbContext.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/RestaurantApp.DAL/Data/RestaurantDbContext.cs" />
              <option name="originalContent" value="using Microsoft.EntityFrameworkCore;&#10;using RestaurantApp.Core.Models;&#10;&#10;namespace RestaurantApp.DAL.Data&#10;{&#10;    public class RestaurantDbContext : DbContext&#10;    {&#10;        public DbSet&lt;MenuItem&gt; MenuItems { get; set; }&#10;        public DbSet&lt;Order&gt; Orders { get; set; }&#10;        public DbSet&lt;OrderItem&gt; OrderItems { get; set; }&#10;        public DbSet&lt;Table&gt; Tables { get; set; }&#10;        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)&#10;        {&#10;            optionsBuilder.UseSqlServer(&quot;Server=(localdb)\\MSSQLLocalDB;Database=RestaurantDb; Trusted_Connection=True;TrustServerCertificate=True;&quot;);&#10;            base.OnConfiguring(optionsBuilder);&#10;        }&#10;        protected override void OnModelCreating(ModelBuilder modelBuilder)&#10;        {&#10;            modelBuilder.ApplyConfigurationsFromAssembly(typeof(RestaurantDbContext).Assembly);&#10;            base.OnModelCreating(modelBuilder);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using Microsoft.EntityFrameworkCore;&#13;&#10;using RestaurantApp.Core.Models;&#13;&#10;&#13;&#10;namespace RestaurantApp.DAL.Data&#13;&#10;{&#13;&#10;    public class RestaurantDbContext : DbContext&#13;&#10;    {&#13;&#10;        public DbSet&lt;MenuItem&gt; MenuItems { get; set; }&#13;&#10;        public DbSet&lt;Order&gt; Orders { get; set; }&#13;&#10;        public DbSet&lt;OrderItem&gt; OrderItems { get; set; }&#13;&#10;        &#13;&#10;        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)&#13;&#10;        {&#13;&#10;            optionsBuilder.UseSqlServer(&quot;Server=(localdb)\\MSSQLLocalDB;Database=RestaurantDb; Trusted_Connection=True;TrustServerCertificate=True;&quot;);&#13;&#10;            base.OnConfiguring(optionsBuilder);&#13;&#10;        }&#13;&#10;        protected override void OnModelCreating(ModelBuilder modelBuilder)&#13;&#10;        {&#13;&#10;            modelBuilder.ApplyConfigurationsFromAssembly(typeof(RestaurantDbContext).Assembly);&#13;&#10;            base.OnModelCreating(modelBuilder);&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/RestaurantApp.DAL/Repositories/Concretes/Repository.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/RestaurantApp.DAL/Repositories/Concretes/Repository.cs" />
              <option name="originalContent" value="using Microsoft.EntityFrameworkCore;&#10;using RestaurantApp.Core.Models.Common;&#10;using RestaurantApp.DAL.Data;&#10;using RestaurantApp.DAL.Repositories.Interfaces;&#10;&#10;namespace RestaurantApp.DAL.Repositories.Concretes&#10;{&#10;    public class Repository&lt;T&gt; : IRepository&lt;T&gt; where T : BaseEntity&#10;    {&#10;        private readonly RestaurantDbContext _restaurantDbContext;&#10;        public DbSet&lt;T&gt; Table { get; set; }&#10;        public Repository()&#10;        {&#10;            _restaurantDbContext = new();&#10;            Table = _restaurantDbContext.Set&lt;T&gt;();&#10;        }&#10;        public async Task CreateAsync(T entity) =&gt; await Table.AddAsync(entity);&#10;&#10;        public async Task DeleteAsync(int id)&#10;        {&#10;            T entityToDelete = await GetByIdAsync(id, useNoTracking: false);&#10;            if (entityToDelete != null)&#10;                Table.Remove(entityToDelete);&#10;        }&#10;&#10;        public async Task&lt;List&lt;T&gt;&gt; GetAllAsync(Func&lt;IQueryable&lt;T&gt;, IQueryable&lt;T&gt;&gt; include = null)&#10;        {&#10;            IQueryable&lt;T&gt; query = Table;&#10;&#10;            if (include != null)&#10;                query = include(query);&#10;&#10;            return await query.AsNoTracking().ToListAsync();&#10;        }&#10;        public async Task&lt;T?&gt; GetByIdAsync(int? id, Func&lt;IQueryable&lt;T&gt;, IQueryable&lt;T&gt;&gt; include = null, bool useNoTracking = true)&#10;        {&#10;            IQueryable&lt;T&gt; query = Table;&#10;&#10;            if (include != null)&#10;                query = include(query);&#10;&#10;            if (useNoTracking)&#10;                query = query.AsNoTracking();&#10;&#10;            return await query.SingleOrDefaultAsync(m =&gt; m.Id == id);&#10;        }&#10;        public async Task SaveChangesAsync() =&gt; await _restaurantDbContext.SaveChangesAsync();&#10;&#10;        public async Task UpdateAsync(T entity) &#10;        {&#10;            T entityToUpdate = await GetByIdAsync(entity.Id,useNoTracking:false);&#10;            if (entityToUpdate != null)&#10;                Table.Update(entity);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using Microsoft.EntityFrameworkCore;&#13;&#10;using RestaurantApp.Core.Models.Common;&#13;&#10;using RestaurantApp.DAL.Data;&#13;&#10;using RestaurantApp.DAL.Repositories.Interfaces;&#13;&#10;&#13;&#10;namespace RestaurantApp.DAL.Repositories.Concretes&#13;&#10;{&#13;&#10;    public class Repository&lt;T&gt; : IRepository&lt;T&gt; where T : BaseEntity&#13;&#10;    {&#13;&#10;        private readonly RestaurantDbContext _restaurantDbContext;&#13;&#10;        public DbSet&lt;T&gt; Table { get; set; }&#13;&#10;        &#13;&#10;        public Repository()&#13;&#10;        {&#13;&#10;            _restaurantDbContext = new();&#13;&#10;            Table = _restaurantDbContext.Set&lt;T&gt;();&#13;&#10;        }&#13;&#10;&#13;&#10;        public async Task&lt;T?&gt; GetByIdAsync(int id)&#13;&#10;        {&#13;&#10;            return await Table.AsNoTracking().SingleOrDefaultAsync(m =&gt; m.Id == id);&#13;&#10;        }&#13;&#10;&#13;&#10;        public async Task&lt;List&lt;T&gt;&gt; GetAllAsync()&#13;&#10;        {&#13;&#10;            return await Table.AsNoTracking().ToListAsync();&#13;&#10;        }&#13;&#10;&#13;&#10;        public async Task CreateAsync(T entity)&#13;&#10;        {&#13;&#10;            await Table.AddAsync(entity);&#13;&#10;        }&#13;&#10;&#13;&#10;        public async Task UpdateAsync(T entity)&#13;&#10;        {&#13;&#10;            Table.Update(entity);&#13;&#10;        }&#13;&#10;&#13;&#10;        public async Task DeleteAsync(int id)&#13;&#10;        {&#13;&#10;            T? entityToDelete = await Table.FindAsync(id);&#13;&#10;            if (entityToDelete != null)&#13;&#10;                Table.Remove(entityToDelete);&#13;&#10;        }&#13;&#10;&#13;&#10;        public async Task SaveChangesAsync()&#13;&#10;        {&#13;&#10;            await _restaurantDbContext.SaveChangesAsync();&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/RestaurantApp.PL/Program.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/RestaurantApp.PL/Program.cs" />
              <option name="originalContent" value="using RestaurantApp.BL.Services.Concretes;&#10;using RestaurantApp.BL.Services.Interfaces;&#10;using RestaurantApp.Core.Enums;&#10;&#10;namespace RestaurantApp.PL&#10;{&#10;    internal class Program&#10;    {&#10;        static async Task Main(string[] args)&#10;        {&#10;&#10;        }&#10;    }&#10;}&#10;&#10;&#10;" />
              <option name="updatedContent" value="using RestaurantApp.BL.Dtos.MenuItem;&#10;using RestaurantApp.BL.Dtos.Order;&#10;using RestaurantApp.BL.Dtos.OrderItem;&#10;using RestaurantApp.BL.Services.Concretes;&#10;using RestaurantApp.BL.Services.Interfaces;&#10;using RestaurantApp.Core.Enums;&#10;&#10;namespace RestaurantApp.PL&#10;{&#10;    internal class Program&#10;    {&#10;        private static IMenuItemService? _menuItemService;&#10;        private static IOrderService? _orderService;&#10;&#10;        static async Task Main(string[] _)&#10;        {&#10;            _menuItemService = new MenuItemService();&#10;            _orderService = new OrderService(_menuItemService);&#10;&#10;            Console.OutputEncoding = System.Text.Encoding.UTF8;&#10;            Console.WriteLine(&quot;=== RESTORAN SİFARİŞ SİSTEMİNE XOŞ GELMİŞSİNİZ ===\n&quot;);&#10;&#10;            while (true)&#10;            {&#10;                try&#10;                {&#10;                    await ShowMainMenu();&#10;                }&#10;                catch (Exception ex)&#10;                {&#10;                    Console.WriteLine($&quot;Xəta baş verdi: {ex.Message}&quot;);&#10;                    Console.WriteLine(&quot;Davam etmək üçün bir düyməyə basın...&quot;);&#10;                    Console.ReadKey();&#10;                }&#10;            }&#10;        }&#10;&#10;        private static async Task ShowMainMenu()&#10;        {&#10;            Console.Clear();&#10;            Console.WriteLine(&quot;=== ƏSAS MENYU ===&quot;);&#10;            Console.WriteLine(&quot;1. Menu üzərində əməliyyat aparmaq&quot;);&#10;            Console.WriteLine(&quot;2. Sifarişlər üzərində əməliyyat aparmaq&quot;);&#10;            Console.WriteLine(&quot;0. Sistemdən çıxmaq&quot;);&#10;            Console.Write(&quot;\nSeçiminizi edin: &quot;);&#10;&#10;            var choice = Console.ReadLine();&#10;&#10;            switch (choice)&#10;            {&#10;                case &quot;1&quot;:&#10;                    await ShowMenuItemOperations();&#10;                    break;&#10;                case &quot;2&quot;:&#10;                    await ShowOrderOperations();&#10;                    break;&#10;                case &quot;0&quot;:&#10;                    Console.WriteLine(&quot;Sistemdən çıxılır...&quot;);&#10;                    Environment.Exit(0);&#10;                    break;&#10;                default:&#10;                    Console.WriteLine(&quot;Yanlış seçim! Davam etmək üçün bir düyməyə basın...&quot;);&#10;                    Console.ReadKey();&#10;                    break;&#10;            }&#10;        }&#10;&#10;        private static async Task ShowMenuItemOperations()&#10;        {&#10;            while (true)&#10;            {&#10;                Console.Clear();&#10;                Console.WriteLine(&quot;=== MENU İTEMLƏRİ ÜZƏRİNDƏ ƏMƏLİYYATLAR ===&quot;);&#10;                Console.WriteLine(&quot;1. Yeni item əlavə et&quot;);&#10;                Console.WriteLine(&quot;2. Item üzərində düzəliş et&quot;);&#10;                Console.WriteLine(&quot;3. Item sil&quot;);&#10;                Console.WriteLine(&quot;4. Bütün itemları göstər&quot;);&#10;                Console.WriteLine(&quot;5. Kateqoriyasına görə menu itemları göstər&quot;);&#10;                Console.WriteLine(&quot;6. Qiymət aralığına görə menu itemlar göstər&quot;);&#10;                Console.WriteLine(&quot;7. Menu itemlar arasında ada görə axtarış et&quot;);&#10;                Console.WriteLine(&quot;0. Əvvəlki menyuya qayıt&quot;);&#10;                Console.Write(&quot;\nSeçiminizi edin: &quot;);&#10;&#10;                var choice = Console.ReadLine();&#10;&#10;                try&#10;                {&#10;                    switch (choice)&#10;                    {&#10;                        case &quot;1&quot;:&#10;                            await AddMenuItem();&#10;                            break;&#10;                        case &quot;2&quot;:&#10;                            await EditMenuItem();&#10;                            break;&#10;                        case &quot;3&quot;:&#10;                            await RemoveMenuItem();&#10;                            break;&#10;                        case &quot;4&quot;:&#10;                            await ShowAllMenuItems();&#10;                            break;&#10;                        case &quot;5&quot;:&#10;                            await ShowMenuItemsByCategory();&#10;                            break;&#10;                        case &quot;6&quot;:&#10;                            await ShowMenuItemsByPriceRange();&#10;                            break;&#10;                        case &quot;7&quot;:&#10;                            await SearchMenuItems();&#10;                            break;&#10;                        case &quot;0&quot;:&#10;                            return;&#10;                        default:&#10;                            Console.WriteLine(&quot;Yanlış seçim!&quot;);&#10;                            break;&#10;                    }&#10;                }&#10;                catch (Exception ex)&#10;                {&#10;                    Console.WriteLine($&quot;Xəta: {ex.Message}&quot;);&#10;                }&#10;&#10;                if (choice != &quot;0&quot;)&#10;                {&#10;                    Console.WriteLine(&quot;\nDavam etmək üçün bir düyməyə basın...&quot;);&#10;                    Console.ReadKey();&#10;                }&#10;            }&#10;        }&#10;&#10;        private static async Task ShowOrderOperations()&#10;        {&#10;            while (true)&#10;            {&#10;                Console.Clear();&#10;                Console.WriteLine(&quot;=== SİFARİŞLƏR ÜZƏRİNDƏ ƏMƏLİYYATLAR ===&quot;);&#10;                Console.WriteLine(&quot;1. Yeni sifariş əlavə etmək&quot;);&#10;                Console.WriteLine(&quot;2. Sifarişin ləğvi&quot;);&#10;                Console.WriteLine(&quot;3. Bütün sifarişlərin ekrana çıxarılması&quot;);&#10;                Console.WriteLine(&quot;4. Verilən tarix aralığına görə sifarişlərin göstərilməsi&quot;);&#10;                Console.WriteLine(&quot;5. Verilən məbləğ aralığına görə sifarişlərin göstərilməsi&quot;);&#10;                Console.WriteLine(&quot;6. Verilmiş bir tarixdə olan sifarişlərin göstərilməsi&quot;);&#10;                Console.WriteLine(&quot;7. Verilmiş nömrəyə əsasən həmin nömrəli sifarişin məlumatlarının göstərilməsi&quot;);&#10;                Console.WriteLine(&quot;0. Əvvəlki menyuya qayıt&quot;);&#10;                Console.Write(&quot;\nSeçiminizi edin: &quot;);&#10;&#10;                var choice = Console.ReadLine();&#10;&#10;                try&#10;                {&#10;                    switch (choice)&#10;                    {&#10;                        case &quot;1&quot;:&#10;                            await AddOrder();&#10;                            break;&#10;                        case &quot;2&quot;:&#10;                            await RemoveOrder();&#10;                            break;&#10;                        case &quot;3&quot;:&#10;                            await ShowAllOrders();&#10;                            break;&#10;                        case &quot;4&quot;:&#10;                            await ShowOrdersByDateRange();&#10;                            break;&#10;                        case &quot;5&quot;:&#10;                            await ShowOrdersByPriceRange();&#10;                            break;&#10;                        case &quot;6&quot;:&#10;                            await ShowOrdersByDate();&#10;                            break;&#10;                        case &quot;7&quot;:&#10;                            await ShowOrderById();&#10;                            break;&#10;                        case &quot;0&quot;:&#10;                            return;&#10;                        default:&#10;                            Console.WriteLine(&quot;Yanlış seçim!&quot;);&#10;                            break;&#10;                    }&#10;                }&#10;                catch (Exception ex)&#10;                {&#10;                    Console.WriteLine($&quot;Xəta: {ex.Message}&quot;);&#10;                }&#10;&#10;                if (choice != &quot;0&quot;)&#10;                {&#10;                    Console.WriteLine(&quot;\nDavam etmək üçün bir düyməyə basın...&quot;);&#10;                    Console.ReadKey();&#10;                }&#10;            }&#10;        }&#10;&#10;        // MenuItem Operations&#10;        private static async Task AddMenuItem()&#10;        {&#10;            Console.Clear();&#10;            Console.WriteLine(&quot;=== YENİ MENU İTEMİ ƏLAVƏ ET ===&quot;);&#10;&#10;            Console.Write(&quot;Adı: &quot;);&#10;            var name = Console.ReadLine() ?? &quot;&quot;;&#10;&#10;            Console.Write(&quot;Qiyməti: &quot;);&#10;            if (!decimal.TryParse(Console.ReadLine(), out decimal price))&#10;            {&#10;                Console.WriteLine(&quot;Yanlış qiymət formatı!&quot;);&#10;                return;&#10;            }&#10;&#10;            Console.WriteLine(&quot;Kateqoriyalar:&quot;);&#10;            var categories = Enum.GetValues&lt;CategoryEnum&gt;();&#10;            for (int i = 0; i &lt; categories.Length; i++)&#10;            {&#10;                Console.WriteLine($&quot;{i + 1}. {categories[i]}&quot;);&#10;            }&#10;&#10;            Console.Write(&quot;Kateqoriya seçin (nömrə): &quot;);&#10;            if (!int.TryParse(Console.ReadLine(), out int categoryChoice) || &#10;                categoryChoice &lt; 1 || categoryChoice &gt; categories.Length)&#10;            {&#10;                Console.WriteLine(&quot;Yanlış kateqoriya seçimi!&quot;);&#10;                return;&#10;            }&#10;&#10;            var dto = new MenuItemCreateDto&#10;            {&#10;                Name = name,&#10;                Price = price,&#10;                Category = categories[categoryChoice - 1]&#10;            };&#10;&#10;            await _menuItemService!.AddMenuItemAsync(dto);&#10;            Console.WriteLine(&quot;Menu item uğurla əlavə edildi!&quot;);&#10;        }&#10;&#10;        private static async Task EditMenuItem()&#10;        {&#10;            Console.Clear();&#10;            Console.WriteLine(&quot;=== MENU İTEMİNİ DÜZƏLİŞ ET ===&quot;);&#10;&#10;            Console.Write(&quot;Düzəliş ediləcək menu item ID-si: &quot;);&#10;            if (!int.TryParse(Console.ReadLine(), out int id))&#10;            {&#10;                Console.WriteLine(&quot;Yanlış ID formatı!&quot;);&#10;                return;&#10;            }&#10;&#10;            var existingItem = await _menuItemService!.GetMenuItemByIdAsync(id);&#10;            Console.WriteLine($&quot;Mövcud məlumatlar - Ad: {existingItem.Name}, Qiymət: {existingItem.Price}, Kateqoriya: {existingItem.Category}&quot;);&#10;&#10;            Console.Write(&quot;Yeni ad: &quot;);&#10;            var name = Console.ReadLine() ?? &quot;&quot;;&#10;&#10;            Console.Write(&quot;Yeni qiymət: &quot;);&#10;            if (!decimal.TryParse(Console.ReadLine(), out decimal price))&#10;            {&#10;                Console.WriteLine(&quot;Yanlış qiymət formatı!&quot;);&#10;                return;&#10;            }&#10;&#10;            Console.WriteLine(&quot;Kateqoriyalar:&quot;);&#10;            var categories = Enum.GetValues&lt;CategoryEnum&gt;();&#10;            for (int i = 0; i &lt; categories.Length; i++)&#10;            {&#10;                Console.WriteLine($&quot;{i + 1}. {categories[i]}&quot;);&#10;            }&#10;&#10;            Console.Write(&quot;Yeni kateqoriya seçin (nömrə): &quot;);&#10;            if (!int.TryParse(Console.ReadLine(), out int categoryChoice) || &#10;                categoryChoice &lt; 1 || categoryChoice &gt; categories.Length)&#10;            {&#10;                Console.WriteLine(&quot;Yanlış kateqoriya seçimi!&quot;);&#10;                return;&#10;            }&#10;&#10;            var dto = new MenuItemUpdateDto&#10;            {&#10;                Id = id,&#10;                Name = name,&#10;                Price = price,&#10;                Category = categories[categoryChoice - 1]&#10;            };&#10;&#10;            await _menuItemService!.EditMenuItemAsync(dto);&#10;            Console.WriteLine(&quot;Menu item uğurla yeniləndi!&quot;);&#10;        }&#10;&#10;        private static async Task RemoveMenuItem()&#10;        {&#10;            Console.Clear();&#10;            Console.WriteLine(&quot;=== MENU İTEMİNİ SİL ===&quot;);&#10;&#10;            Console.Write(&quot;Silinəcək menu item ID-si: &quot;);&#10;            if (!int.TryParse(Console.ReadLine(), out int id))&#10;            {&#10;                Console.WriteLine(&quot;Yanlış ID formatı!&quot;);&#10;                return;&#10;            }&#10;&#10;            await _menuItemService!.RemoveMenuItemAsync(id);&#10;            Console.WriteLine(&quot;Menu item uğurla silindi!&quot;);&#10;        }&#10;&#10;        private static async Task ShowAllMenuItems()&#10;        {&#10;            Console.Clear();&#10;            Console.WriteLine(&quot;=== BÜTÜN MENU İTEMLƏRİ ===&quot;);&#10;&#10;            var items = await _menuItemService!.GetAllMenuItemsAsync();&#10;            DisplayMenuItems(items);&#10;        }&#10;&#10;        private static async Task ShowMenuItemsByCategory()&#10;        {&#10;            Console.Clear();&#10;            Console.WriteLine(&quot;=== KATEQORİYAYA GÖRƏ MENU İTEMLƏRİ ===&quot;);&#10;&#10;            Console.WriteLine(&quot;Kateqoriyalar:&quot;);&#10;            var categories = Enum.GetValues&lt;CategoryEnum&gt;();&#10;            for (int i = 0; i &lt; categories.Length; i++)&#10;            {&#10;                Console.WriteLine($&quot;{i + 1}. {categories[i]}&quot;);&#10;            }&#10;&#10;            Console.Write(&quot;Kateqoriya seçin (nömrə): &quot;);&#10;            if (!int.TryParse(Console.ReadLine(), out int choice) || &#10;                choice &lt; 1 || choice &gt; categories.Length)&#10;            {&#10;                Console.WriteLine(&quot;Yanlış kateqoriya seçimi!&quot;);&#10;                return;&#10;            }&#10;&#10;            var selectedCategory = categories[choice - 1];&#10;            var items = await _menuItemService!.GetMenuItemsByCategoryAsync(selectedCategory);&#10;            DisplayMenuItems(items);&#10;        }&#10;&#10;        private static async Task ShowMenuItemsByPriceRange()&#10;        {&#10;            Console.Clear();&#10;            Console.WriteLine(&quot;=== QİYMƏT ARALIĞINA GÖRƏ MENU İTEMLƏRİ ===&quot;);&#10;&#10;            Console.Write(&quot;Minimum qiymət: &quot;);&#10;            if (!decimal.TryParse(Console.ReadLine(), out decimal minPrice))&#10;            {&#10;                Console.WriteLine(&quot;Yanlış qiymət formatı!&quot;);&#10;                return;&#10;            }&#10;&#10;            Console.Write(&quot;Maksimum qiymət: &quot;);&#10;            if (!decimal.TryParse(Console.ReadLine(), out decimal maxPrice))&#10;            {&#10;                Console.WriteLine(&quot;Yanlış qiymət formatı!&quot;);&#10;                return;&#10;            }&#10;&#10;            var items = await _menuItemService!.GetMenuItemsByPriceIntervalAsync(minPrice, maxPrice);&#10;            DisplayMenuItems(items);&#10;        }&#10;&#10;        private static async Task SearchMenuItems()&#10;        {&#10;            Console.Clear();&#10;            Console.WriteLine(&quot;=== MENU İTEMLƏRİNDƏ AXTARIŞ ===&quot;);&#10;&#10;            Console.Write(&quot;Axtarış mətni: &quot;);&#10;            var searchText = Console.ReadLine() ?? &quot;&quot;;&#10;&#10;            var items = await _menuItemService!.SearchMenuItemsAsync(searchText);&#10;            DisplayMenuItems(items);&#10;        }&#10;&#10;        // Order Operations&#10;        private static async Task AddOrder()&#10;        {&#10;            Console.Clear();&#10;            Console.WriteLine(&quot;=== YENİ SİFARİŞ ƏLAVƏ ET ===&quot;);&#10;&#10;            var orderItems = new List&lt;OrderItemCreateDto&gt;();&#10;&#10;            while (true)&#10;            {&#10;                Console.WriteLine(&quot;\nMövcud menu itemlər:&quot;);&#10;                var menuItems = await _menuItemService!.GetAllMenuItemsAsync();&#10;                DisplayMenuItems(menuItems);&#10;&#10;                Console.Write(&quot;\nMenu item ID-si (0 - bitir): &quot;);&#10;                if (!int.TryParse(Console.ReadLine(), out int menuItemId))&#10;                {&#10;                    Console.WriteLine(&quot;Yanlış ID formatı!&quot;);&#10;                    continue;&#10;                }&#10;&#10;                if (menuItemId == 0) break;&#10;&#10;                Console.Write(&quot;Say: &quot;);&#10;                if (!int.TryParse(Console.ReadLine(), out int count) || count &lt;= 0)&#10;                {&#10;                    Console.WriteLine(&quot;Yanlış say formatı!&quot;);&#10;                    continue;&#10;                }&#10;&#10;                orderItems.Add(new OrderItemCreateDto&#10;                {&#10;                    MenuItemId = menuItemId,&#10;                    Count = count&#10;                });&#10;&#10;                Console.WriteLine(&quot;Item əlavə edildi!&quot;);&#10;            }&#10;&#10;            if (!orderItems.Any())&#10;            {&#10;                Console.WriteLine(&quot;Sifariş üçün heç bir item əlavə edilmədi!&quot;);&#10;                return;&#10;            }&#10;&#10;            var orderDto = new OrderCreateDto&#10;            {&#10;                OrderItems = orderItems&#10;            };&#10;&#10;            await _orderService!.AddOrderAsync(orderDto);&#10;            Console.WriteLine(&quot;Sifariş uğurla əlavə edildi!&quot;);&#10;        }&#10;&#10;        private static async Task RemoveOrder()&#10;        {&#10;            Console.Clear();&#10;            Console.WriteLine(&quot;=== SİFARİŞİ LƏĞV ET ===&quot;);&#10;&#10;            Console.Write(&quot;Ləğv ediləcək sifariş ID-si: &quot;);&#10;            if (!int.TryParse(Console.ReadLine(), out int orderId))&#10;            {&#10;                Console.WriteLine(&quot;Yanlış ID formatı!&quot;);&#10;                return;&#10;            }&#10;&#10;            await _orderService!.RemoveOrderAsync(orderId);&#10;            Console.WriteLine(&quot;Sifariş uğurla ləğv edildi!&quot;);&#10;        }&#10;&#10;        private static async Task ShowAllOrders()&#10;        {&#10;            Console.Clear();&#10;            Console.WriteLine(&quot;=== BÜTÜN SİFARİŞLƏR ===&quot;);&#10;&#10;            var orders = await _orderService!.GetAllOrdersAsync();&#10;            DisplayOrders(orders);&#10;        }&#10;&#10;        private static async Task ShowOrdersByDateRange()&#10;        {&#10;            Console.Clear();&#10;            Console.WriteLine(&quot;=== TARİX ARALIĞINA GÖRƏ SİFARİŞLƏR ===&quot;);&#10;&#10;            Console.Write(&quot;Başlanğıc tarixi (yyyy-mm-dd): &quot;);&#10;            if (!DateTime.TryParse(Console.ReadLine(), out DateTime startDate))&#10;            {&#10;                Console.WriteLine(&quot;Yanlış tarix formatı!&quot;);&#10;                return;&#10;            }&#10;&#10;            Console.Write(&quot;Son tarix (yyyy-mm-dd): &quot;);&#10;            if (!DateTime.TryParse(Console.ReadLine(), out DateTime endDate))&#10;            {&#10;                Console.WriteLine(&quot;Yanlış tarix formatı!&quot;);&#10;                return;&#10;            }&#10;&#10;            var orders = await _orderService!.GetOrdersByDatesIntervalAsync(startDate, endDate);&#10;            DisplayOrders(orders);&#10;        }&#10;&#10;        private static async Task ShowOrdersByPriceRange()&#10;        {&#10;            Console.Clear();&#10;            Console.WriteLine(&quot;=== MƏBLƏĞ ARALIĞINA GÖRƏ SİFARİŞLƏR ===&quot;);&#10;&#10;            Console.Write(&quot;Minimum məbləğ: &quot;);&#10;            if (!decimal.TryParse(Console.ReadLine(), out decimal minPrice))&#10;            {&#10;                Console.WriteLine(&quot;Yanlış məbləğ formatı!&quot;);&#10;                return;&#10;            }&#10;&#10;            Console.Write(&quot;Maksimum məbləğ: &quot;);&#10;            if (!decimal.TryParse(Console.ReadLine(), out decimal maxPrice))&#10;            {&#10;                Console.WriteLine(&quot;Yanlış məbləğ formatı!&quot;);&#10;                return;&#10;            }&#10;&#10;            var orders = await _orderService!.GetOrdersByPriceIntervalAsync(minPrice, maxPrice);&#10;            DisplayOrders(orders);&#10;        }&#10;&#10;        private static async Task ShowOrdersByDate()&#10;        {&#10;            Console.Clear();&#10;            Console.WriteLine(&quot;=== TARİXƏ GÖRƏ SİFARİŞLƏR ===&quot;);&#10;&#10;            Console.Write(&quot;Tarix (yyyy-mm-dd): &quot;);&#10;            if (!DateTime.TryParse(Console.ReadLine(), out DateTime date))&#10;            {&#10;                Console.WriteLine(&quot;Yanlış tarix formatı!&quot;);&#10;                return;&#10;            }&#10;&#10;            var orders = await _orderService!.GetOrdersByDateAsync(date);&#10;            DisplayOrders(orders);&#10;        }&#10;&#10;        private static async Task ShowOrderById()&#10;        {&#10;            Console.Clear();&#10;            Console.WriteLine(&quot;=== SİFARİŞİN ƏTRAFLI MƏLUMATLARI ===&quot;);&#10;&#10;            Console.Write(&quot;Sifariş ID-si: &quot;);&#10;            if (!int.TryParse(Console.ReadLine(), out int orderId))&#10;            {&#10;                Console.WriteLine(&quot;Yanlış ID formatı!&quot;);&#10;                return;&#10;            }&#10;&#10;            var order = await _orderService!.GetOrderByNoAsync(orderId);&#10;            DisplayOrderDetails(order);&#10;        }&#10;&#10;        // Display Methods&#10;        private static void DisplayMenuItems(List&lt;MenuItemListDto&gt; items)&#10;        {&#10;            Console.WriteLine(&quot;\n&quot; + new string('-', 80));&#10;            Console.WriteLine($&quot;{&quot;ID&quot;,-5} {&quot;Ad&quot;,-20} {&quot;Kateqoriya&quot;,-15} {&quot;Qiymət&quot;,-10}&quot;);&#10;            Console.WriteLine(new string('-', 80));&#10;&#10;            foreach (var item in items)&#10;            {&#10;                Console.WriteLine($&quot;{item.Id,-5} {item.Name,-20} {item.Category,-15} {item.Price,-10:C}&quot;);&#10;            }&#10;            Console.WriteLine(new string('-', 80));&#10;        }&#10;&#10;        private static void DisplayOrders(List&lt;OrderListDto&gt; orders)&#10;        {&#10;            Console.WriteLine(&quot;\n&quot; + new string('-', 80));&#10;            Console.WriteLine($&quot;{&quot;ID&quot;,-5} {&quot;Məbləğ&quot;,-15} {&quot;İtem Sayı&quot;,-10} {&quot;Tarix&quot;,-20}&quot;);&#10;            Console.WriteLine(new string('-', 80));&#10;&#10;            foreach (var order in orders)&#10;            {&#10;                Console.WriteLine($&quot;{order.Id,-5} {order.TotalAmount,-15:C} {order.MenuItemCount,-10} {order.Date,-20:dd.MM.yyyy HH:mm}&quot;);&#10;            }&#10;            Console.WriteLine(new string('-', 80));&#10;        }&#10;&#10;        private static void DisplayOrderDetails(OrderListDto order)&#10;        {&#10;            Console.WriteLine($&quot;\nSifariş ID: {order.Id}&quot;);&#10;            Console.WriteLine($&quot;Məbləğ: {order.TotalAmount:C}&quot;);&#10;            Console.WriteLine($&quot;İtem Sayı: {order.MenuItemCount}&quot;);&#10;            Console.WriteLine($&quot;Tarix: {order.Date:dd.MM.yyyy HH:mm}&quot;);&#10;            &#10;            if (order.OrderItems?.Any() == true)&#10;            {&#10;                Console.WriteLine(&quot;\nSifariş itemləri:&quot;);&#10;                Console.WriteLine(new string('-', 60));&#10;                Console.WriteLine($&quot;{&quot;ID&quot;,-5} {&quot;Ad&quot;,-20} {&quot;Say&quot;,-10}&quot;);&#10;                Console.WriteLine(new string('-', 60));&#10;                &#10;                foreach (var item in order.OrderItems)&#10;                {&#10;                    Console.WriteLine($&quot;{item.MenuItemId,-5} {item.MenuItemName,-20} {item.Count,-10}&quot;);&#10;                }&#10;                Console.WriteLine(new string('-', 60));&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>